public class Recursao {

    public static void main(String[] args) {
        System.out.println(multiplicacao(6, 4));
        System.out.println(soma(3, 2));
        System.out.println(somaumsobrenmaisum(6));
        System.out.println(inversaoString("hello"));
        System.out.println(f(5));
        System.out.println(ackerman(2, 3));
        int[] vetor = {1, 2, 3, 4};
        System.out.println(somaProdutosElementosVetor(vetor, vetor.length));
        System.out.println(produtoElementosVetor(vetor, vetor.length));
        System.out.println(isPalindrome("abcba"));
        generateCombinations(3);
        System.out.println(fibg(0, 1, 5));
    }

    public static int multiplicacao(int a, int b) {
        if (b == 0) {
            return 0;
        }
        return a + multiplicacao(a, b - 1);
    }

    public static int soma(int a, int b) {
        if (b == 0) {
            return a;
        }
        return 1 + soma(a, b - 1);
    }

    public static double somaumsobrenmaisum(int b) {
        if (b == 0) {
            return 1;
        }
        return 1 + 1.0 / somaumsobrenmaisum(b - 1);
    }

    public static String inversaoString(String s) {
        if (s.isEmpty()) {
            return "";
        }
        return s.charAt(s.length() - 1) + inversaoString(s.substring(0, s.length() - 1));
    }

    public static int f(int n) {
        if (n == 1) {
            return 1;
        }
        if (n == 2) {
            return 2;
        }
        return 2 * f(n - 1) + 3 * f(n - 2);
    }

    public static int ackerman(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (m != 0 && n == 0) {
            return ackerman(m - 1, 1);
        }
        return ackerman(m - 1, ackerman(m, n - 1));
    }

    public static int somaProdutosElementosVetor(int[] vetor, int n) {
        if (n == 0) {
            return 0;
        }
        return vetor[n - 1] + somaProdutosElementosVetor(vetor, n - 1);
    }

    public static int produtoElementosVetor(int[] vetor, int n) {
        if (n == 0) {
            return 1;
        }
        return vetor[n - 1] * produtoElementosVetor(vetor, n - 1);
    }

    public static boolean isPalindrome(String s) {
        if (s.length() == 0 || s.length() == 1) {
            return true;
        }
        if (s.charAt(0) == s.charAt(s.length() - 1)) {
            return isPalindrome(s.substring(1, s.length() - 1));
        }
        return false;
    }

    public static void generateCombinations(int n) {
        char[] alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();
        generateCombinationsHelper(alphabet, "", n);
    }

    private static void generateCombinationsHelper(char[] alphabet, String prefix, int n) {
        if (prefix.length() == n) {
            System.out.println(prefix);
            return;
        }
        for (int i = 0; i < n; i++) {
            if (!prefix.contains(String.valueOf(alphabet[i]))) {
                generateCombinationsHelper(alphabet, prefix + alphabet[i], n);
            }
        }
    }

    public static int fibg(int f0, int f1, int n) {
        if (n == 0) {
            return f0;
        }
        if (n == 1) {
            return f1;
        }
        return fibg(f0, f1, n - 1) + fibg(f0, f1, n - 2);
    }
}
